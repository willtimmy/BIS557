?model.frame
install.packages('devtools')
install.packages('testthat')
?qr.coef
data <- iris
View(data)
names(data)
formula <- Sepal.Length~Sepal.Width+Petal.Width
mat <- model.frame(formula, data)
Y <- data.frame(mat[,1])
colnames(Y) <- names(mat[1])
X <- data.frame(mat[,-1])
colnames(X) <- names(mat[-1])
head(Y)
head(X)
qr(X)
qr_obj <- qr(X)
Q <- qr.Q(qr_obj)
head(Q)
R <- qr.R(qr_obj)
head(R)
Qty <- crossprod(Q, Y)
Y
qr.coef()
qr.coef(qr)
X_d <- qr(X)
X_d
Coefficients <- qr.coef(X_d, Y)
class(Coefficients)
Coefficients
class(Coefficients) <- 'lm'
Coefficients
result <- list()
result$Coefficients <- qr.coef(X_d, Y)
class(result)
class(result) <- 'lm'
result
result <- list()
X_d <- qr(X)
result$coefficients <- qr.coef(X_d, Y)
class(result) <- 'lm'
result
a<-all.vars(formula)
y<- data[,a[1]]
y
mm<-model.matrix(formula,data)
head(mm)
ï¼Ÿrep
?rep
X <- data.frame(Intercept=rep(1:length(Y)))
X
mat <- model.frame(formula, data)
Y <- data.frame(mat[,1])
colnames(Y) <- names(mat[1])
X_1 <- data.frame(mat[,-1])
colnames(X_1) <- names(mat[-1])
X <- data.frame(Intercept=rep(1:length(Y)))
X <- cbind(X, X_1)
head(X)
result <- list()
X_d <- qr(X)
result$coefficients <- qr.coef(X_d, Y)
class(result) <- 'lm'
result
lm(formula, data)
mat <- model.frame(formula, data)
Y <- data.frame(mat[,1])
colnames(Y) <- names(mat[1])
X_1 <- data.frame(mat[,-1])
colnames(X_1) <- names(mat[-1])
X <- data.frame((Intercept)=rep(1:length(Y)))
X <- cbind(X, X_1)
result <- list()
X_d <- qr(X)
result$coefficients <- qr.coef(X_d, Y)
class(result) <- 'lm'
mat <- model.frame(formula, data)
Y <- data.frame(mat[,1])
colnames(Y) <- names(mat[1])
X_1 <- data.frame(mat[,-1])
colnames(X_1) <- names(mat[-1])
X <- data.frame(Intercept=rep(1:length(Y)))
colnames(X) <- c('(Intercept)')
X <- cbind(X, X_1)
head(X)
result <- list()
X_d <- qr(X)
result$coefficients <- qr.coef(X_d, Y)
class(result) <- 'lm'
result
result$call <- call(formula)
formula <- Sepal.Length ~.
mat <- model.frame(formula, data)
Y <- data.frame(mat[,1])
colnames(Y) <- names(mat[1])
X_1 <- data.frame(mat[,-1])
colnames(X_1) <- names(mat[-1])
X <- data.frame(Intercept=rep(1:length(Y)))
colnames(X) <- c('(Intercept)')
X <- cbind(X, X_1)
head(X)
result <- list()
X_d <- qr(X)
result$coefficients <- qr.coef(X_d, Y)
a<- all.vars(formula)
y <- data[,a[1]]
mm <- model.matrix(formula, data)
x<-mm
output <- list()
output$coefficients <- qr.coef(qr(x),y)
x
head(x)
mat <- model.frame(formula, data)
Y <- data.frame(mat[,1])
colnames(Y) <- names(mat[1])
X <- model.matrix(formula, data)
#Calculate coefficients
result <- list()
X_d <- qr(X)
result$coefficients <- qr.coef(X_d, Y)
class(result) <- 'lm'
result
?model.matrix
?model.frame
?model.matrix
?svd
setwd('/Users/willtimmy/Desktop/Documents/My Document/Schools/Yale University/Courses/Biostatistics & Statistics/BIS 557/HW/bis557/data-raw')
lm_patho <- read.csv("df.csv")
dir.create("../data")
save(lm_patho, file = "../data/lm_patho.rda")
ridge_train <- read.csv("ridge_train.csv")
dir.create("../data")
save(ridge_train, file = "../data/ridge_train.rda")
ridge_test <- read.csv("ridge_test.csv")
dir.create("../data")
save(ridge_test, file = "../data/ridge_test.rda")
lambda_seq <- seq(0, 100, by=0.1)
mse <- rep(NA, length(lambda_seq))
result <- cbind(lambda_seq, mse)
class(result)
result <- data.frame(cbind(lambda_seq, mse))
library(bis557)
predict.ridge_reg <- function(object, ...){
newdata <- list(...)[[1]] #Give the actual objects
m <- model.matrix(object$formula, newdata)
m %*% object$coefficients
}
lambda_seq <- seq(0, 100, by=0.1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
for (i in 1:length(result$mse)) {
fit <- ridge_reg(formula, result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict.ridge_reg(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
ridge_reg <- function(formula, lambda, data){
rownames(data) <- NULL
#B/c pima already has rownames, since training set and test set does not match the rownames and returns error
m <- model.matrix(formula, data)
y <- matrix(data[, as.character(formula)[2]], ncol = 1)
y <- y[as.numeric(rownames(m)), , drop = FALSE]
#Via SVD:
svd_obj <- svd(m)
U <- svd_obj$u
V <- svd_obj$v
svals <- svd_obj$d
D <- diag(svals / (svals^2 + lambda))
beta <- V %*% D %*% t(U) %*% y
rownames(beta) <- colnames(m)
ret <- list(coefficients = beta, lambda = lambda, formula = formula)
class(ret) <- "ridge_reg"
ret
}
for (i in 1:length(result$mse)) {
fit <- ridge_reg(formula, result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict.ridge_reg(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
for (i in 1:length(result$mse)) {
fit <- ridge_reg(formula, result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict.ridge_reg(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
result$lambda_seq[min(mse),]
result$lambda_seq[min(mse)]
lambda_seq <- seq(0, 100, by=0.1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
result$lambda_seq[min(mse)]
View(ridge_test)
View(ridge_train)
View(result)
result$lambda_seq[result$mse=min(mse)]
result$lambda_seq[result$mse==min(mse)]
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict.ridge_reg(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
View(result)
result$lambda_seq[result$mse==min(mse)]
result$lambda_seq[result$mse==min(result$mse)]
lambda_seq <- seq(0, 500, by=0.1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict.ridge_reg(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
#Select lambda
result$lambda_seq[result$mse==min(result$mse)]
lambda_seq <- seq(0, 500, by=0.1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
#Select lambda
result$lambda_seq[result$mse==min(result$mse)]
lambda_seq <- seq(0, 1000, by=1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict.ridge_reg(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
#Select lambda
result$lambda_seq[result$mse==min(result$mse)]
lambda_seq <- seq(0, 1000, by=1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_train$y - predict(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
#Select lambda
result$lambda_seq[result$mse==min(result$mse)]
View(result)
result$log_lambda <- log(result$lambda_seq)
result$log_lambda[result$mse==min(result$mse)]
predict.ridge_reg(fit, ridge_test)
predict(fit, ridge_test)
a <- ridge_train$y - predict.ridge_reg(fit, ridge_test)
mean(a^2)
b <- ridge_train$y - predict(fit, ridge_test)
mean(b^2)
plot(result$log_lambda, result$mse)
lambda_seq <- seq(0, 1000, by=1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_test$y - predict.ridge_reg(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
result$log_lambda <- log(result$lambda_seq)
result$log_lambda[result$mse==min(result$mse)]
#Plot
plot(result$log_lambda, result$mse)
lambda_seq <- seq(0, 50, by=0.1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_test$y - predict.ridge_reg(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
#Select optimal log_lambda
result$log_lambda <- log(result$lambda_seq)
result$log_lambda[result$mse==min(result$mse)]
#Plot
plot(result$log_lambda, result$mse)
lambda_seq <- seq(0, 100, by=0.1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(y~., result$lambda_seq[i], ridge_train)
error <- ridge_test$y - predict.ridge_reg(fit, ridge_test)
result$mse[i] <- mean(error^2)
}
#Select optimal log_lambda
result$log_lambda <- log(result$lambda_seq)
result$log_lambda[result$mse==min(result$mse)]
#Plot
plot(result$log_lambda, result$mse)
result$lambda_seq[result$mse==min(result$mse)]
plot(result$log_lambda, result$mse)
View(ridge_train)
?scale
ridge_train_scale <- cbind(ridge_train$y, scale(ridge_train[,-1]))
ridge_train_scale <- data.frame(cbind(ridge_train$y, scale(ridge_train[,-1])))
View(ridge_train_scale)
library(bis557)
data(ridge_train)
data(ridge_test)
#Predict fitted value
predict.ridge_reg <- function(object, ...) {
newdata <- list(...)[[1]] #Give the actual objects
m <- model.matrix(object$formula, newdata)
m %*% object$coefficients
}
#Scale training set and test set
ridge_train_scale <- data.frame(cbind(ridge_train$y, scale(ridge_train[,-1])))
ridge_test_scale <- data.frame(cbind(ridge_test$y, scale(ridge_test[,-1])))
lambda_seq <- seq(0, 100, by=0.1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(V1~., result$lambda_seq[i], ridge_train_scale)
error <- ridge_test_scale$V1 - predict.ridge_reg(fit, ridge_test_scale)
result$mse[i] <- mean(error^2)
}
predict.ridge_reg <- function(object, ...) {
newdata <- list(...)[[1]] #Give the actual objects
m <- model.matrix(object$formula, newdata)
m %*% object$coefficients
}
#Scale training set and test set
ridge_train_scale <- data.frame(cbind(ridge_train$y, scale(ridge_train[,-1])))
ridge_test_scale <- data.frame(cbind(ridge_test$y, scale(ridge_test[,-1])))
lambda_seq <- seq(0, 100, by=0.1)
mse <- rep(NA, length(lambda_seq))
result <- data.frame(cbind(lambda_seq, mse))
#Calculate mse
for (i in 1:length(result$mse)) {
fit <- ridge_reg(V1~., result$lambda_seq[i], ridge_train_scale)
error <- ridge_test_scale$V1 - predict.ridge_reg(fit, ridge_test_scale)
result$mse[i] <- mean(error^2)
}
result$log_lambda <- log(result$lambda_seq)
result$lambda_seq[result$mse==min(result$mse)]
#Plot
plot(result$log_lambda, result$mse)
plot(result$lambda_seq, result$mse)
