library(glmnet)
#Check current KKT conditions for regression vector (P189)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
#Lasso_reg_with_screening
lasso_reg_with_screening <- function(X, y, alpha=1){
model <- cv.glmnet(X, y, alpha=alpha)
lambda <- model$lambda.1se
b <- model$glmnet.fit$beta[, lambda==model$lambda.1se]
casl_lenet_check_kkt(X, y, b=b, lambda=lambda)
}
#Create dataset (P190)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
#No violation of KKN conditions
lasso_reg_with_screening(X, y)
model <- cv.glmnet(X, y, alpha=alpha)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
model <- cv.glmnet(X, y, alpha=alpha)
alpha=1
model <- cv.glmnet(X, y, alpha=alpha)
lambda <- model$lambda.1se
b <- model$glmnet.fit$beta[, lambda==model$lambda.1se]
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
s <- apply(X, 2, function(xj) crossprod(xj, resids)) #/ lambda / nrow(X)
head(s)
(b == 0) & (abs(s) >= 1)
View(X)
s <- apply(X, 2, function(xj) crossprod(xj, resids))  / nrow(X)
?apply
length(b)
lenth(s)
length(s)
s[1]
s[1][1]
s[[1]]
s[[2]][1]
s[[1]][1]
s[[1]][2]
s[[1]]
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids) / lambda / nrow(X))
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
for (i in length(s)) {
for (j in length(s[1])) {
(b[i*j] == 0) & (abs(s[[i]][j]) >= 1)
}
}
}
#Lasso_reg_with_screening
lasso_reg_with_screening <- function(X, y, alpha=1){
model <- cv.glmnet(X, y, alpha=alpha)
lambda <- model$lambda.1se
b <- model$glmnet.fit$beta[, lambda==model$lambda.1se]
casl_lenet_check_kkt(X, y, b=b, lambda=lambda)
}
#Create dataset (P190)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
lasso_reg_with_screening(X, y)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids) / lambda / nrow(X))
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
for (i in length(s)) {
for (j in length(s[1])) {
return((b[i*j] == 0) & (abs(s[[i]][j]) >= 1))
}
}
}
lasso_reg_with_screening(X, y)
library(glmnet)
#Check current KKT conditions for regression vector (P189)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids) / lambda / nrow(X))
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
for (i in 1:length(s)) {
for (j in 1:length(s[1])) {
return((b[i*j] == 0) & (abs(s[[i]][j]) >= 1))
}
}
}
lasso_reg_with_screening(X, y)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids) / lambda / nrow(X))
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
Violation <- rep(NA, 50000)
for (i in 1:length(s)) {
for (j in 1:length(s[1])) {
Violation[i*j] <- (b[i*j] == 0) & (abs(s[[i]][j]) >= 1)
}
}
Violation
}
lasso_reg_with_screening(X, y)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids) / lambda / nrow(X))
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
Violation <- rep(NA, 50000)
for (i in 1:length(s)) {
for (j in 1:length(s[1])) {
Violation[i*j] <- (b[i*j] == 0) & (abs(s[[i]][j]) >= 1)
}
}
Violation
}
#Lasso_reg_with_screening
lasso_reg_with_screening <- function(X, y, alpha=1){
model <- cv.glmnet(X, y, alpha=alpha)
lambda <- model$lambda.1se
b <- model$glmnet.fit$beta[, lambda==model$lambda.1se]
casl_lenet_check_kkt(X, y, b=b, lambda=lambda)
}
#Create dataset (P190)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
lasso_reg_with_screening(X, y)
library(glmnet)
#Check current KKT conditions for regression vector (P189)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids) / lambda / nrow(X))
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
Violation <- rep(NA, 50000)
for (i in 1:length(s)) {
for (j in 1:length(s[1])) {
Violation[i*j] <- (b[i*j] == 0) & (abs(s[[i]][j]) >= 1)
}
}
Violation
}
#Lasso_reg_with_screening
lasso_reg_with_screening <- function(X, y, alpha=1){
model <- cv.glmnet(X, y, alpha=alpha)
lambda <- model$lambda.1se
b <- model$glmnet.fit$beta[, lambda==model$lambda.1se]
casl_lenet_check_kkt(X, y, b=b, lambda=lambda)
}
#Create dataset (P190)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
lasso_reg_with_screening(X, y)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- round(apply(X, 2, function(xj) crossprod(xj, resids) / lambda / nrow(X)))
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
Violation <- rep(NA, 50000)
for (i in 1:length(s)) {
for (j in 1:length(s[1])) {
Violation[i*j] <- (b[i*j] == 0) & (abs(s[[i]][j]) >= 1)
}
}
Violation
}
lasso_reg_with_screening(X, y)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) round(crossprod(xj, resids) / lambda / nrow(X)))
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
Violation <- rep(NA, 50000)
for (i in 1:length(s)) {
for (j in 1:length(s[1])) {
Violation[i*j] <- (b[i*j] == 0) & (abs(s[[i]][j]) >= 1)
}
}
Violation
}
lasso_reg_with_screening(X, y)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids) / lambda / nrow(X))
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
Violation <- rep(NA, 50000)
for (i in 1:length(s)) {
for (j in 1:length(s[1])) {
Violation[i*j] <- (b[i*j] == 0) #& (abs(s[[i]][j]) >= 1)
}
}
Violation
}
lasso_reg_with_screening(X, y)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
alpha=1
model <- cv.glmnet(X, y, alpha=alpha)
model <- cv.glmnet(X, y, alpha=alpha)
lambda <- model$lambda.1se
b <- model$glmnet.fit$beta[, lambda==model$lambda.1se]
b
model$lambda
b <- model$glmnet.fit$beta[, model$lambda==model$lambda.1se]
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
(b[i*j] == 0) & (abs(s) >= 1)
(b == 0) & (abs(s) >= 1)
casl_lenet_check_kkt <- function(X, y, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
#Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
#Lasso_reg_with_screening
lasso_reg_with_screening <- function(X, y, alpha=1){
model <- cv.glmnet(X, y, alpha=alpha)
lambda <- model$lambda.1se
b <- model$glmnet.fit$beta[, model$lambda==model$lambda.1se]
casl_lenet_check_kkt(X=X, y=y, b=b, lambda=lambda)
}
#Create dataset (P190)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
#No violation of KKN conditions
lasso_reg_with_screening(X, y)
